#!/usr/bin/env python
"""
This is a small script that does the equivalent of multicrab.
"""

import argparse
import imp
import multiprocessing
import os
import sys

from CRABAPI.RawCommand import crabCommand
from CRABClient.ClientExceptions import ClientException
from CRABClient.UserUtilities import setConsoleLogLevel
from httplib import HTTPException


def realsub(config):
    try:
        os.makedirs(config.General.workArea)
    except OSError:
        pass

    try:
        crabCommand('submit', config=config)
    except HTTPException as hte:
        print "Failed submitting task: {0}".format(hte.headers)
    except ClientException as cle:
        print "Failed submitting task: {0}".format(cle)


def submit(config):
    mod = imp.load_source('idontcare', config)

    p = multiprocessing.Pool(1)
    p.map(realsub, mod.configs())


def realst(wflow):
    result = crabCommand(command, dir=wflow)
    sys.stdout.write('.')
    sys.stdout.flush()
    return result


def status(workdir):
    setConsoleLogLevel(100)

    names = []
    wflows = []
    for name in os.listdir(checkpoint):
        wflow = os.path.join(checkpoint, name)
        if not os.path.isdir(wflow):
            continue
        names.append(name)
        wflows.append(wflow)

    p = multiprocessing.Pool(3)
    results = p.map(realst, wflows)

    statii = []
    for name, result in zip(names, results):
        statii.append([
            name,
            result['status'].lower(),
            result['jobsPerStatus'],
            sum([v for k, v in result['jobsPerStatus'].items()])
        ])
    print ""

    states = set()
    for _, _, summary, _ in statii:
        states = states | set(summary.keys())
    states = sorted(states)
    totals = [0] * len(states)

    fmt = "{{name:{0}}} {{status:15}} ".format(max([len(xs[0]) for xs in statii] + [4])) \
        + " ".join(['{{{0}:>{1}}}'.format(n, l) for n, l in enumerate(map(len, states))]) \
        + " {total:>6}"
    header = fmt.format(*states, name="task", status="status", total="total")
    print header
    print "-" * len(header)
    for task, status, jobs, total in statii:
        jobstates = [jobs.get(st, 0) for st in states]
        totals = [a + b for a, b in zip(totals, jobstates)]
        print fmt.format(*jobstates, name=task, status=status, total=total)
    print "-" * len(header)
    print fmt.format(*totals, name="", status="", total=sum(totals))


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='grudgingly manage many crab tasks')
    parser.add_argument('command', type=str, nargs=1,
                        help='the crab command to execute')
    parser.add_argument('checkpoint', metavar='[config|directory]', type=str, nargs=1,
                        help='the crab configuration/working directory')
    args = parser.parse_args()

    command = args.command[0]
    checkpoint = args.checkpoint[0]
    if command in ('submit', 'sub'):
        submit(checkpoint)
    elif command in ('status',):
        status(checkpoint)
    else:
        for name in os.listdir(checkpoint):
            proj = os.path.join(checkpoint, name)
            if not os.path.isdir(proj):
                continue
            # Execute the crab command.
            msg = "Executing (the equivalent of): crab {0} --dir {1}".format(command, proj)
            print "-" * len(msg)
            print msg
            print "-" * len(msg)
            try:
                crabCommand(command, dir=proj)
            except HTTPException as hte:
                print "Failed executing command {0} for task {1}: {2}".format(command, proj, hte.headers)
            except ClientException as cle:
                print "Failed executing command {0} for task {1}: {2}".format(command, proj, cle)
