#!/usr/bin/env python

import argparse
import datetime
import numpy as np
import ROOT as r
import shutil

from numpy.lib import recfunctions as rfn

from rootpy.io import root_open

from root_numpy import array2tree, list_branches, list_trees, root2array

r.gROOT.SetBatch()
r.gStyle.SetOptStat(0)

parser = argparse.ArgumentParser(description='create likelihood mapping for combining MVAs')
parser.add_argument('--bins', help='how many bins to use', type=int, default=60)
parser.add_argument('infile', help='input filename')
parser.add_argument('ntuple', help='ntuple to add likelihood to')
args = parser.parse_args()

with root_open(args.infile) as f:
    likelihood = f.hTargetBinning
    likelihood.SetDirectory(0)

backup = "{}.{:%Y-%m-%d_%H%M}".format(args.ntuple, datetime.datetime.now())
shutil.copy(args.ntuple, backup)
for treename in list_trees(backup):
    if not treename.endswith('_mva'):
        continue
    branches = []
    print "processing", treename
    for b in list_branches(backup, treename):
        if 'likelihood' not in b:
            branches.append(b)
    try:
        data = root2array(backup, treename, branches)
    except ValueError:
        tree = array2tree(
            np.array([], dtype=[('tmva_likelihood', 'float64')]),
            treename
        )
        with root_open(args.ntuple, 'update') as f:
            f.WriteObject(tree, treename, "WriteDelete")
        continue
    likelihoods = []
    for tt, ttZ in zip(data['tmva_tt'], data['tmva_ttZ']):
        likelihoods.append(likelihood.GetBinContent(likelihood.FindBin(tt, ttZ)))
    tree = array2tree(
        rfn.append_fields(data, names=['tmva_likelihood'], data=[likelihoods]),
        treename
    )
    with root_open(args.ntuple, 'update') as f:
        f.WriteObject(tree, treename, "WriteDelete")
