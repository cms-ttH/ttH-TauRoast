#!/usr/bin/env python

import argparse
import datetime
import numpy as np
import ROOT as r
import shutil

from numpy.lib import recfunctions as rfn

from rootpy.io import root_open
from rootpy.plotting import Hist

from root_numpy import array2tree, list_branches, list_trees, root2array

r.gROOT.SetBatch()
r.gStyle.SetOptStat(0)

parser = argparse.ArgumentParser(description='create likelihood mapping for combining MVAs')
parser.add_argument('--bins', help='how many bins to use', type=int, default=60)
parser.add_argument('infile', help='input filename')
parser.add_argument('outfile', help='output filename')
parser.add_argument('ntuple', help='ntuple to add likelihood to', nargs='?')
args = parser.parse_args()

with root_open(args.infile) as f:
    likelihood = r.TH2F("hist", "Likelihood", args.bins, -1, 1, args.bins, -1, 1)
    f.ttH2Nonbb_125_train_mva.Draw("tmva_tt:tmva_ttZ", hist=likelihood)
    likelihood.Scale(1. / likelihood.GetMaximum())
    with root_open(args.outfile, "recreate") as of:
        of.WriteObject(likelihood, "likelihood_raw", "WriteDelete")
    c = r.TCanvas()
    likelihood.Draw("COLZ")
    c.SaveAs("likelihood_raw.png")

    t = f.ttH2Nonbb_125_train_mva
    values = [likelihood.GetBinContent(likelihood.FindBin(e.tmva_tt, e.tmva_ttZ)) for e in t]
    fractions = np.linspace(0, 100, 6)
    quants = [np.percentile(values, n) for n in fractions]
    quants[-1] += .001
    remap_linear = Hist(quants)
    fractions = [0, 10, 30, 60, 100]
    quants = [np.percentile(values, n) for n in fractions]
    quants[-1] += .001
    remap = Hist(quants)
    likelihood_linear = likelihood.Clone()
    for x in range(likelihood.GetNbinsX()):
        for y in range(likelihood.GetNbinsY()):
            bn = likelihood.GetBin(x + 1, y + 1)
            likelihood.SetBinContent(bn, remap.FindBin(likelihood.GetBinContent(bn)) - 1)
            likelihood_linear.SetBinContent(bn, remap_linear.FindBin(likelihood.GetBinContent(bn)) - 1)
    with root_open(args.outfile, "update") as of:
        of.WriteObject(likelihood, "likelihood", "WriteDelete")
        of.WriteObject(likelihood_linear, "likelihood_linear", "WriteDelete")
    likelihood.Draw("COLZ")
    c.SaveAs("likelihood.png")
    likelihood_linear.Draw("COLZ")
    c.SaveAs("likelihood_linear.png")

    trees = "ttH2Nonbb_125 ttZ ttjets_sl_pow ttjets_dl_pow".split()
    hists = []
    for t in [getattr(f, t + "_train_mva") for t in trees]:
        mapped = Hist(np.linspace(0, 4, 5), name=t.GetName() + '_hist')
        for e in t:
            mapped.Fill(likelihood.GetBinContent(likelihood.FindBin(e.tmva_tt, e.tmva_ttZ)))
        hists.append(mapped)
    last = hists.pop(-1)
    hists[-1].Add(last)

    for h in hists:
        h.Scale(1. / h.Integral())

    ttH, ttZ, ttjets = hists
    ttH.SetLineColor(r.kRed)
    ttZ.SetLineColor(r.kGreen)
    ttjets.SetLineColor(r.kBlack)
    ttjets.Draw()
    ttZ.Draw("same")
    ttH.Draw("same")
    c.SaveAs("output.png")

    likelihood.SetDirectory(0)
    likelihood_linear.SetDirectory(0)

if args.ntuple:
    backup = "{}.{:%Y-%m-%d_%H%M}".format(args.ntuple, datetime.datetime.now())
    shutil.copy(args.ntuple, backup)
    for treename in list_trees(backup):
        if not treename.endswith('_mva'):
            continue
        branches = []
        print "processing", treename
        for b in list_branches(backup, treename):
            if 'likelihood' not in b:
                branches.append(b)
        try:
            data = root2array(backup, treename, branches)
        except ValueError:
            continue
        likelihoods = []
        likelihoods_linear = []
        for tt, ttZ in zip(data['tmva_tt'], data['tmva_ttZ']):
            likelihoods.append(likelihood.GetBinContent(likelihood.FindBin(tt, ttZ)))
            likelihoods_linear.append(likelihood_linear.GetBinContent(likelihood.FindBin(tt, ttZ)))
        tree = array2tree(
            rfn.append_fields(data, names=['tmva_likelihood', 'tmva_likelihood_linear'], data=[likelihoods, likelihoods_linear]),
            treename
        )
        with root_open(args.ntuple, 'update') as f:
            f.WriteObject(tree, treename, "WriteDelete")
