#!/usr/bin/env python

import argparse
import os
import numpy as np
import pickle
import yaml
import ROOT as r

from root_numpy import root2array
from sklearn.metrics import roc_curve, auc

import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import seaborn

r.gROOT.SetBatch()
r.gSystem.Load("libttHTauRoast")

from ttH.TauRoast import useful, training

seaborn.set_style('whitegrid', {'font.family': 'sans-serif', 'font.sans-serif': [u'Source Sans Pro']})
seaborn.set_context('paper', font_scale=1.5)


def load_variable(config, name):
    name, origin = name.split(':')

    d_train, y_train, w_train = None, None, None

    setup = training.load(config, origin.replace("sklearn_", ""))
    setup["variables"] = [name]
    signal, signal_weight, background, background_weight = training.read_inputs(config, setup)
    d_test = np.concatenate((signal, background)).ravel()
    y_test = np.concatenate((np.ones(signal.shape[0]),
                             np.zeros(background.shape[0])))
    w_test = np.concatenate((signal_weight, background_weight))
    return d_test, y_test, w_test, d_train, y_train, w_train


def load_sklearn(config, name):
    origin = None
    if ':' in name:
        name, origin = name.split(':')
    dirname = os.path.join(config.get("indir", config["outdir"]), name)
    with open(os.path.join(dirname, "bdt.pkl"), 'rb') as fd:
        bdt, label = pickle.load(fd)
    if origin:
        d_train, y_train, w_train = None, None, None

        setup = training.load(config, name.replace("sklearn_", ""))
        origin_setup = training.load(config, origin.replace("sklearn_", ""))
        setup['signals'] = origin_setup['signals']
        setup['backgrounds'] = origin_setup['backgrounds']

        signal, signal_weight, background, background_weight = training.read_inputs(config, setup)
        x_test = np.concatenate((signal, background))
        y_test = np.concatenate((np.ones(signal.shape[0]),
                                 np.zeros(background.shape[0])))
        w_test = np.concatenate((signal_weight, background_weight))

        d_test = bdt.decision_function(x_test)
    else:
        with open(os.path.join(dirname, "data.pkl"), 'rb') as fd:
            x_train, x_test, y_train, y_test, w_train, w_test = pickle.load(fd)
        d_train = bdt.decision_function(x_train)
        d_test = bdt.decision_function(x_test)
    return d_test, y_test, w_test, d_train, y_train, w_train


def load_tmva(config, name):
    dirname = os.path.join(config.get("indir", config["outdir"]), name)
    test = root2array(os.path.join(dirname, "tmva.root"), "TestTree", ["classID", "BDTG", "weight"])
    train = root2array(os.path.join(dirname, "tmva.root"), "TrainTree", ["classID", "BDTG", "weight"])
    return test["BDTG"], np.ones(len(test)) - test["classID"], test["weight"], \
        train["BDTG"], np.ones(len(train)) - train["classID"], train["weight"]


parser = argparse.ArgumentParser(description='Plot ROC curves')
parser.add_argument('--labels', type=str,
                    help='labels to use in the legend, comma separated')
parser.add_argument('config', metavar='config', type=str,
                    help='a configuration file to use')
parser.add_argument('names', type=str, nargs='*', metavar='name',
                    help="MVA configurations to use")
ag = parser.add_argument_group('general options')
ag.add_argument('-i', '--input', type=str, default=None,
                help="change input directory")
ag.add_argument('-o', '--output', type=str, default=None,
                help="change output directory")
args = parser.parse_args()

with open(args.config) as f:
    config = yaml.load(f)

if args.output:
    config['outdir'] = args.output
if args.input:
    config['indir'] = args.input

useful.setup(config)
useful.load_python(config.get('mode'))

if args.labels:
    labels = args.labels.split(',')
else:
    labels = [n.split(':', 1)[0] if ':' in n else n for n in args.names]

for name, label in zip(args.names, labels):
    if name.startswith("sklearn"):
        d_test, y_test, w_test, d_train, y_train, w_train = load_sklearn(config, name)
    elif name.startswith("tmva"):
        d_test, y_test, w_test, d_train, y_train, w_train = load_tmva(config, name)
    else:
        d_test, y_test, w_test, d_train, y_train, w_train = load_variable(config, name)

    line = None
    what = ''
    if d_train is not None:
        fpr, tpr, thresholds = roc_curve(y_train, d_train, sample_weight=w_train)
        roc_auc = auc(fpr, tpr, True)
        line = plt.plot(fpr, tpr, '--', lw=1, label='{} training (area = {:0.3f})'.format(label, roc_auc))
        what = ' testing'

    fpr, tpr, thresholds = roc_curve(y_test, d_test, sample_weight=w_test)
    roc_auc = auc(fpr, tpr, True)
    if line:
        plt.plot(fpr, tpr, lw=1, color=line[-1].get_color(), label='{}{} (area = {:0.3f})'.format(label, what, roc_auc))
    else:
        plt.plot(fpr, tpr, lw=1, label='{}{} (area = {:0.3f})'.format(label, what, roc_auc))

plt.xlim([0., 1.])
plt.xlabel('Background efficiency')
plt.ylabel('Signal efficiency')

plt.legend(loc='best', frameon=True)
plt.savefig(os.path.join(config["outdir"], 'roc.pdf'), bbox_inches='tight')
plt.close()
