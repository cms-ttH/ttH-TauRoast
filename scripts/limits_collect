#!/usr/bin/env python
# vim: set fileencoding=utf-8 :

import argparse
import glob
import re

fitre = re.compile(r'Best fit r: ([-\d.]+(?:e-?[\d]+)?)\s+-([\d.]+(?:e-?[\d]+)?)/(\+[\d.]+(?:e-?[\d]+)?)')

mapping = [
    ('TMVAlike10', r'\(\SI{1}{\Plep}+\SI{2}{\Ptauh}\) (\Ptt, \PttZ)'),
    ('TMVAlike8_tt', r'\(\SI{1}{\Plep}+\SI{2}{\Ptauh}\) (\Ptt)'),
    ('2lss1tau', r'\(\SI{2}{\Plep ss}+\SI{1}{\Ptauh}\)'),
    ('3l1tau', r'\(\SI{3}{\Plep}+\SI{1}{\Ptauh}\)'),
    ('combination_htt', r'Final states with \Ptauh'),
    ('combination_multilep', r'Combination'),
]


def channel(s):
    for test, result in mapping:
        if test in s:
            return result


def read_limits(logs, injectedlogs):
    limits = {}
    for fn in logs:
        with open(fn) as fd:
            limits[channel(fn)] = [ln.split()[-1] for ln in fd if 'r <' in ln]
    for fn in injectedlogs:
        with open(fn) as fd:
            for line in fd:
                if 'Observed' in line:
                    limits[channel(fn)].insert(1, line.split()[-1])
    print("--- limit plot ---")
    print("label & observed & injected & expected & downone & upone & downtwo & uptwo")
    for _, name in reversed(mapping):
        print("{n} & {lm[0]} & {lm[1]} & {lm[4]} & {lm[3]} & {lm[5]} & {lm[2]} & {lm[6]}".format(n=name, lm=limits[name]))
    print("--- limit table ---")
    for _, name in mapping:
        lm = [float(f) for f in limits[name]]
        up = lm[5] - lm[4]
        down = lm[3] - lm[4]
        print(
            "{n} & {lm[0]:.2f} & {lm[1]:.2f} & \({lm[4]:.2f}_{{{down:.2f}}}^{{{up:+.2f}}}\) \\\\".format(
                n=name, lm=lm, up=up, down=down)
        )


def read_best_fits(logs):
    fits = {}
    for fn in logs:
        with open(fn) as fd:
            for line in fd:
                m = fitre.match(line)
                if m:
                    fits[channel(fn)] = [float(f) for f in m.groups()]
                    break
    print("--- bestfit plot ---")
    print("label & mu & minus & plus")
    for _, name in reversed(mapping):
        print("{0}\\\\\(Î¼ = {1:0.1f}^{{{3:+0.1f}}}_{{-{2:0.1f}}}\) & {1} & {2} & {3}".format(name, *fits[name]))


parser = argparse.ArgumentParser()
parser.add_argument('inputdir', help='directory containing limit output')
args = parser.parse_args()

limitfiles = set(glob.glob(args.inputdir + '/*_limit.log'))
injectedfiles = set(glob.glob(args.inputdir + '/*_limit_injected.log'))
fitfiles = set(glob.glob(args.inputdir + '/*_fit.log'))

read_limits(limitfiles, injectedfiles)
read_best_fits(fitfiles)
