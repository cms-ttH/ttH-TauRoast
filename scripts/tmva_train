#!/usr/bin/env python

import argparse
import numpy as np
import os
import yaml
import ROOT as r

from root_numpy.tmva import add_classification_events
from sklearn.cross_validation import train_test_split

r.gROOT.SetBatch()
r.gSystem.Load("libttHTauRoast")

from ttH.TauRoast import botany, training, useful

parser = argparse.ArgumentParser(description='Train TMVA.')
parser.add_argument('config', metavar='config', type=str,
                    help='a configuration file to use')
parser.add_argument('name', type=str,
                    help="an MVA configuration to use")
ag = parser.add_argument_group('general options')
ag.add_argument('-i', '--input', type=str, default=None,
                help="change input directory")
ag.add_argument('-o', '--output', type=str, default=None,
                help="change output directory")
args = parser.parse_args()

with open(args.config) as f:
    config = yaml.load(f)

if args.output:
    config['outdir'] = args.output
if args.input:
    config['indir'] = args.input

useful.setup(config)
useful.load_python(config.get('mode'))

setup = training.load(config, args.name)
outdir = os.path.join(config["outdir"], 'tmva_' + args.name)

fn = os.path.join(config.get("indir", config["outdir"]), "ntuple.root")
ofn = os.path.join(outdir, "tmva.root")

wdir = os.path.join(os.path.dirname(ofn), 'weights')
if not os.path.exists(wdir):
    os.makedirs(wdir)
r.TMVA.gConfig().GetIONames().fWeightFileDir = wdir

outfile = r.TFile(ofn, "RECREATE")
factory = r.TMVA.Factory("TMVAClassification", outfile,
                         "!V:!Silent:Transformations=I;D;P;G,D:AnalysisType=Classification")

leaves = dict((l.name, l.kind) for l in botany.Leaf.leaves())
for var in setup['variables']:
    factory.AddVariable(var, leaves[var])

signal, signal_weight, background, background_weight = training.read_inputs(config, setup)
training.plot_correlations(outdir, setup["variables"], signal, background)
training.plot_inputs(outdir, setup["variables"], signal, signal_weight, background, background_weight)

x = np.concatenate((signal, background))
y = np.concatenate((np.ones(signal.shape[0]),
                    np.zeros(background.shape[0])))
w = np.concatenate((signal_weight, background_weight))

x_train, x_test, y_train, y_test, w_train, w_test = train_test_split(x, y, w, test_size=1.0 / training.CV)

add_classification_events(factory, x_train, y_train, weights=w_train)
add_classification_events(factory, x_test, y_test, weights=w_test, test=True)

factory.PrepareTrainingAndTestTree(r.TCut('1'), "NormMode=NumEvents:!V")
factory.BookMethod(r.TMVA.Types.kBDT, "BDTG", setup["tmva"])
factory.TrainAllMethods()
factory.TestAllMethods()
factory.EvaluateAllMethods()
