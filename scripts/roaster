#!/usr/bin/env python
# vim: ts=4:sw=4:et:sta

import argparse
import logging
import os
import yaml

parser = argparse.ArgumentParser(description='Grill some taus.')
parser.add_argument('config', metavar='config', type=str, nargs=1,
                    help='a configuration file to use')
parser.add_argument('-v', '--verbose', action="count", default=0,
                    help="increase verbosity")
parser.add_argument('-q', '--quiet', action="count", default=0,
                    help="decrease verbosity")
ag = parser.add_argument_group('analysis options')
ag.add_argument('-a', '--analyze', action='store_true', default=False,
                help="analyze datasets")
ag.add_argument('-f', '--fill', action='store_true', default=False,
                help="fill histograms")
ag.add_argument('-p', '--plot', action='store_true', default=False,
                help="save histograms")
ag.add_argument('-d', '--datacard', action='store_true', default=False,
                help="save datacard")
ag.add_argument('-t', '--train', action='store_true', default=False,
                help="train MVA")
ag = parser.add_argument_group('general options')
ag.add_argument('-i', '--input', type=str, default=None,
                help="change input directory")
ag.add_argument('-o', '--output', type=str, default=None,
                help="change output directory")
ag.add_argument('-r', '--reuse', action='store_true', default=False,
                help="continue processing reusing previous results")
ag.add_argument('-s', '--systematics', action='store_true', default=False,
                help="run systematics")
ag.add_argument('-u', '--unblind', action='store_true', default=False,
                help="unblind plots")
ag = parser.add_argument_group('debugging and syncronization options')
ag.add_argument('--debug-cuts', action='store_true', default=False,
                help="save event quantites after each cut")
ag = parser.add_argument_group('datacard options')
ag.add_argument('--discriminant', type=str, default='BDT',
                help="which discriminant to use")

args = parser.parse_args()

if 'LOCALRT' not in os.environ:
    parser.error("need to do a `cmsenv` first")

if not any([args.analyze, args.fill, args.plot, args.datacard, args.train]):
    parser.error("need to either analyze, fill, plot, train, or datacard")

# Logging setup
logging.basicConfig(
    datefmt="%Y-%m-%d %H:%M:%S",
    format="%(asctime)s [%(levelname)s] - %(filename)s %(lineno)d: %(message)s")

logging.__dict__['root'].level = (2 + args.quiet - args.verbose) * 10

with open(args.config[0]) as f:
    config = yaml.load(f)

if args.output:
    config['outdir'] = args.output
if args.input:
    config['indir'] = args.input

for k in ('indir', 'outdir', 'mvadir', 'ntupledir'):
    if k in config:
        config[k] = os.path.expanduser(os.path.expandvars(config[k]))

import ROOT as r

r.gROOT.SetBatch()
r.gErrorIgnoreLevel = 1001
r.gSystem.Load("libttHTauRoast")

from ttH.TauRoast import stylish, useful
from ttH.TauRoast.actionable import analyze, dump_categories, dump_cuts, fill, plot, datacard, train
from ttH.TauRoast.plotting import Plot
from ttH.TauRoast.processing import split_procs
from ttH.TauRoast.variation import setup

useful.setup(config)
useful.load_python(config.get('mode'))
stylish.setup()

split_procs(config)

if not os.path.exists(config["outdir"]):
    os.makedirs(config["outdir"])

if 'mva' in config:
    cfg = config['mva']
    setup(config['outdir'], cfg['variables'])

if args.unblind:
    Plot.unblind()

actions = []

if args.analyze:
    actions.append(analyze)
if args.analyze or args.fill:
    actions.append(dump_cuts)
if args.fill:
    actions.append(fill)
if args.fill or args.plot:
    actions.append(dump_categories)
if args.plot:
    actions.append(plot)
if args.datacard:
    actions.append(datacard)
if args.train:
    actions.append(train)

for action in actions:
    action(args, config)
    if action != dump_cuts and action != dump_categories:
        config.pop('indir', None)
