#!/usr/bin/env python

import argparse
import os
import yaml

import ROOT as r

r.gROOT.SetBatch()
r.gErrorIgnoreLevel = 1001
r.gSystem.Load("libttHTauRoast")

from ttH.TauRoast import plotting, processing, stylish, useful

# Histogram naming scheme
histpath = "ttH_1l_2tau_postfit/{}"

# Map processes to others, values need to be lowercase
procmap = {
    'ttH2Nonbb125': 'TotalSig'
}


class PostfitPlot(plotting.Plot):
    """Produce postfit plot in the style of the others."""

    def __init__(self, imitate, filename):
        original = plotting.Plot.get(imitate)
        super(PostfitPlot, self).__init__(imitate + '_postfit', ['bogus'], original.labels, original.binning)

        self.__f = r.TFile(filename)

    def _get_histogram(self, process, systematic=None):
        pn = processing.Process.get(process).limitname
        if pn in procmap:
            pn = procmap[pn]
        h = self.__f.Get(histpath.format(pn))
        # import pdb
        # pdb.set_trace()
        if h:
            print "Found", process, pn
            return h.Clone()
        raise KeyError(pn)


parser = argparse.ArgumentParser(description='Produce postfit plots')
parser.add_argument('config', metavar='config', type=str,
                    help='a configuration file to use')
parser.add_argument('template', metavar='template', type=str,
                    help='a plot to use as template')
parser.add_argument('filename', metavar='file', type=str,
                    help='a file with postfit shapes')
parser.add_argument('-v', '--verbose', action="count", default=0,
                    help="increase verbosity")
parser.add_argument('-q', '--quiet', action="count", default=0,
                    help="decrease verbosity")

args = parser.parse_args()

with open(args.config) as f:
    config = yaml.load(f)

useful.setup(config)
useful.load_python(config.get('mode'))
stylish.setup()

datadir = os.path.join(os.environ["LOCALRT"], 'src', 'ttH', 'TauRoast', 'data')
with open(os.path.join(datadir, 'plot.yaml')) as f:
    plotconfig = yaml.load(f)
plotconfig.update(config.get('plot override', {}))

p = PostfitPlot(args.template, args.filename)
p.save(plotconfig, '', systematics=[])
